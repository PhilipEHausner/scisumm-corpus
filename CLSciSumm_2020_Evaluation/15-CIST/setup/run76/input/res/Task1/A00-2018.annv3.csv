Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
2,A00-2018,N10-1002,0,"Charniak, 2000",0,"As a benchmark VPC extraction system, we use the Charniak parser (Charniak, 2000)","As a benchmark VPC extraction system, we use the Charniak parser (Charniak, 2000)","'116','117','118','119'","<S sid=""116"" ssid=""7"">This is as opposed to the &amp;quot;Markovgrammar&amp;quot; approach used in the current parser.</S><S sid=""117"" ssid=""8"">Also, the earlier parser uses two techniques not employed in the current parser.</S><S sid=""118"" ssid=""9"">First, it uses a clustering scheme on words to give the system a &amp;quot;soft&amp;quot; clustering of heads and sub-heads.</S><S sid=""119"" ssid=""10"">(It is &amp;quot;soft&amp;quot; clustering in that a word can belong to more than one cluster with different weights - the weights express the probability of producing the word given that one is going to produce a word from that cluster.)</S>",Implication_Citation
3,A00-2018,W11-0610,0,"Charniak, 2000",0,"Each of these scores can be calculated from a provided syntactic parse tree, and to generate these we made use of the Charniakparser (Charniak, 2000), also trained on the Switch board tree bank","Each of these scores can be calculated from a provided syntactic parse tree, and to generate these we made use of the Charniak parser (Charniak, 2000), also trained on the Switch board tree bank","'91','117','129','178'","<S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""117"" ssid=""8"">Also, the earlier parser uses two techniques not employed in the current parser.</S><S sid=""129"" ssid=""20"">It makes no use of special maximum-entropyinspired features (though their presence made it much easier to perform these experiments), it does not guess the pre-terminal before guessing the lexical head, and it uses a tree-bank grammar rather than a Markov grammar.</S><S sid=""178"" ssid=""5"">The results of 13 achieved by combining the aforementioned three-best parsers also suggest that the limit on tree-bank trained parsers is much higher than previously thought.</S>",Method_Citation
4,A00-2018,W06-3119,0,"Charniak, 2000",0,"We then use Charniak? s parser (Charniak, 2000) to generate the most likely parse tree for each English target sentence in the training corpus","We then use Charniak's parser (Charniak, 2000) to generate the most likely parse tree for each English target sentence in the training corpus","'1','5','91','175'","<S sid=""1"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal treebank.</S><S sid=""5"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees 16 that achieves 90.1% average precision/recall for sentences of length &lt; 40, and 89.5% for sentences of length &lt; 100, when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal tree-bank.</S><S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""175"" ssid=""2"">This corresponds to an error reduction of 13% over the best previously published single parser results on this test set, those of Collins 9.</S>",Hypothesis_Citation
5,A00-2018,N03-2024,0,"Charniak, 2000",0,"We were interested in the occurrence of features such as type and number of premodifiers, presence and type of post modifiers, and form of name reference for people. We constructed a large, automatically annotated corpus by merging the output of Charniak? s statistical parser (Charniak, 2000) with that of the IBM named entity recognition system Nominator (Wacholder et al,1997)","We were interested in the occurrence of features such as type and number of premodifiers, presence and type of post modifiers, and form of name reference for people. We constructed a large, automatically annotated corpus by merging the output of Charniak's statistical parser (Charniak, 2000) with that of the IBM named entity recognition system Nominator (Wacholder et al,1997)","'39','40','120','129'","<S sid=""39"" ssid=""8"">In our work we assume that any feature can occur at most once, so features are boolean-valued: 0 if the pattern does not occur, 1 if it does.</S><S sid=""40"" ssid=""9"">In the parser we further assume that features are chosen from certain feature schemata and that every feature is a boolean conjunction of sub-features.</S><S sid=""120"" ssid=""11"">Second, Char97 uses unsupervised learning in that the original system was run on about thirty million words of unparsed text, the output was taken as &amp;quot;correct&amp;quot;, and statistics were collected on the resulting parses.</S><S sid=""129"" ssid=""20"">It makes no use of special maximum-entropyinspired features (though their presence made it much easier to perform these experiments), it does not guess the pre-terminal before guessing the lexical head, and it uses a tree-bank grammar rather than a Markov grammar.</S>",Method_Citation
6,A00-2018,N06-1039,0,"Charniak, 2000",0,"After getting a set of basic clusters, we pass them to an existing statistical parser (Charniak, 2000) and rule-based tree normalizer to obtain a GLARFstructure for each sentence in every article","After getting a set of basic clusters, we pass them to an existing statistical parser (Charniak, 2000) and rule-based tree normalizer to obtain a GLARF structure for each sentence in every article","'1','5','120','176'","<S sid=""1"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal treebank.</S><S sid=""5"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees 16 that achieves 90.1% average precision/recall for sentences of length &lt; 40, and 89.5% for sentences of length &lt; 100, when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal tree-bank.</S><S sid=""120"" ssid=""11"">Second, Char97 uses unsupervised learning in that the original system was run on about thirty million words of unparsed text, the output was taken as &amp;quot;correct&amp;quot;, and statistics were collected on the resulting parses.</S><S sid=""176"" ssid=""3"">That the previous three best parsers on this test 5,9,17 all perform within a percentage point of each other, despite quite different basic mechanisms, led some researchers to wonder if there might be some maximum level of parsing performance that could be obtained using the treebank for training, and to conjecture that perhaps we were at it.</S>",Method_Citation
7,A00-2018,C04-1180,0,2000,0,"The levels of accuracy and robustness recently achieved by statistical parsers (e.g. Collins (1999), Charniak (2000)) have led to their use in a number of NLP applications, such as question-answering (Pasca and Harabagiu, 2001), machine translation (Charniak et al, 2003), sentence simplification (Carroll et al, 1999), and a linguist? s search engine (Resnik and Elkiss, 2003)","The levels of accuracy and robustness recently achieved by statistical parsers (e.g. Collins (1999), Charniak (2000)) have led to their use in a number of NLP applications, such as question-answering (Pasca and Harabagiu, 2001), machine translation (Charniak et al, 2003), sentence simplification (Carroll et al, 1999), and a linguist? s search engine (Resnik and Elkiss, 2003)","'0','122','175','176'","<S sid=""0"">A Maximum-Entropy-Inspired Parser *</S><S sid=""122"" ssid=""13"">In this section we evaluate the effects of the various changes we have made by running various versions of our current program.</S><S sid=""175"" ssid=""2"">This corresponds to an error reduction of 13% over the best previously published single parser results on this test set, those of Collins 9.</S><S sid=""176"" ssid=""3"">That the previous three best parsers on this test 5,9,17 all perform within a percentage point of each other, despite quite different basic mechanisms, led some researchers to wonder if there might be some maximum level of parsing performance that could be obtained using the treebank for training, and to conjecture that perhaps we were at it.</S>",Aim_Citation
8,A00-2018,W05-0638,0,"Charniak, 2000",0,"In CoNLL-2005, full parsing trees are provided by two full parsers: the Collins parser (Collins, 1999) and the Charniak parser (Charniak, 2000)","In CoNLL-2005, full parsing trees are provided by two full parsers: the Collins parser (Collins, 1999) and the Charniak parser (Charniak, 2000)","'6','10','91','174'","<S sid=""6"" ssid=""2"">This represents a 13% decrease in error rate over the best single-parser results on this corpus 9.</S><S sid=""10"" ssid=""6"">That is, the parser implements the function arg maxrp(7r s) = arg maxirp(7r, s) = arg maxrp(w).</S><S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""174"" ssid=""1"">We have presented a lexicalized Markov grammar parsing model that achieves (using the now standard training/testing/development sections of the Penn treebank) an average precision/recall of 91.1% on sentences of length &lt; 40 and 89.5% on sentences of length &lt; 100.</S>","Hypothesis_Citation,Method_Citation"
9,A00-2018,P05-1065,0,"Charniak, 2000",0,"We also use a standard statistical parser (Charniak, 2000) to provide syntactic analysis","We also use a standard statistical parser (Charniak, 2000) to provide syntactic analysis","'89','90','91','117'","<S sid=""89"" ssid=""58"">(Actually, we use a minor variant described in 4.)</S><S sid=""90"" ssid=""1"">We created a parser based upon the maximumentropy-inspired model of the last section, smoothed using standard deleted interpolation.</S><S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""117"" ssid=""8"">Also, the earlier parser uses two techniques not employed in the current parser.</S>","Implication_Citation,Method_Citation"
10,A00-2018,P05-1065,0,"Charniak, 2000",0,"For each article, we calculated the per cent age of a) all word instances (tokens) and b) all unique words (types) not on these lists, resulting in three token OOV rate features and three type OOV rate features per article. The parse features are generated using the Charniak parser (Charniak, 2000) trained on the standard Wall Street Journal Treebank corpus","For each article, we calculated the percentage of a) all word instances (tokens) and b) all unique words (types) not on these lists, resulting in three token OOV rate features and three type OOV rate features per article. The parse features are generated using the Charniak parser (Charniak, 2000) trained on the standard Wall Street Journal Treebank corpus","'1','5','101','102'","<S sid=""1"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal treebank.</S><S sid=""5"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees 16 that achieves 90.1% average precision/recall for sentences of length &lt; 40, and 89.5% for sentences of length &lt; 100, when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal tree-bank.</S><S sid=""101"" ssid=""12"">In keeping with the standard methodology 5, 9,10,15,17, we used the Penn Wall Street Journal tree-bank 16 with sections 2-21 for training, section 23 for testing, and section 24 for development (debugging and tuning).</S><S sid=""102"" ssid=""13"">Performance on the test corpus is measured using the standard measures from 5,9,10,17.</S>","Implication_Citation,Method_Citation"
11,A00-2018,P04-1040,0,2000,0,"The evaluation of the transformed output of the parsers of Charniak (2000) and Collins (1999) gives 90 %unlabelled and 84 %labelled accuracy with respect to dependencies, when measured against a dependency corpus derived from the Penn Treebank.The paper is organized as follows","The evaluation of the transformed output of the parsers of Charniak (2000) and Collins (1999) gives 90 % unlabelled and 84 % labelled accuracy with respect to dependencies, when measured against a dependency corpus derived from the Penn Treebank. The paper is organized as follows","'102','107','108','174'","<S sid=""102"" ssid=""13"">Performance on the test corpus is measured using the standard measures from 5,9,10,17.</S><S sid=""107"" ssid=""18"">The results for the new parser as well as for the previous top-three individual parsers on this corpus are given in Figure 1.</S><S sid=""108"" ssid=""19"">As is typical, all of the standard measures tell pretty much the same story, with the new parser outperforming the other three parsers.</S><S sid=""174"" ssid=""1"">We have presented a lexicalized Markov grammar parsing model that achieves (using the now standard training/testing/development sections of the Penn treebank) an average precision/recall of 91.1% on sentences of length &lt; 40 and 89.5% on sentences of length &lt; 100.</S>",Method_Citation
12,A00-2018,P04-1040,0,2000,0,"Blaheta and Charniak (2000) presented the first method for assigning Pennfunctional tags to constituents identified by a parser. Pattern-matching approaches were used in (John son, 2002) and (Jijkoun, 2003) to recover non-local dependencies in phrase trees","Blaheta and Charniak (2000) presented the first method for assigning Penn functional tags to constituents identified by a parser. Pattern-matching approaches were used in (Johnson, 2002) and (Jijkoun, 2003) to recover non-local dependencies in phrase trees","'1','5','18','117'","<S sid=""1"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal treebank.</S><S sid=""5"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees 16 that achieves 90.1% average precision/recall for sentences of length &lt; 40, and 89.5% for sentences of length &lt; 100, when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal tree-bank.</S><S sid=""18"" ssid=""7"">The method that gives the best results, however, uses a Markov grammar &#8212; a method for assigning probabilities to any possible expansion using statistics gathered from the training corpus 6,10,15.</S><S sid=""117"" ssid=""8"">Also, the earlier parser uses two techniques not employed in the current parser.</S>","Hypothesis_Citation,Implication_Citation,Results_Citation"
13,A00-2018,P04-1040,0,2000,0,"As an alternative to hard coded heuristics, Blaheta and Charniak (2000) proposed to recover the Penn functional tags automatically","As an alternative to hard coded heuristics, Blaheta and Charniak (2000) proposed to recover the Penn functional tags automatically","'0','5','12','141'","<S sid=""0"">A Maximum-Entropy-Inspired Parser *</S><S sid=""5"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees 16 that achieves 90.1% average precision/recall for sentences of length &lt; 40, and 89.5% for sentences of length &lt; 100, when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal tree-bank.</S><S sid=""12"" ssid=""1"">The model assigns a probability to a parse by a top-down process of considering each constituent c in Ir and for each c first guessing the pre-terminal of c, t(c) (t for &amp;quot;tag&amp;quot;), then the lexical head of c, h(c), and then the expansion of c into further constituents e(c).</S><S sid=""141"" ssid=""32"">(For example, part-ofspeech tagging using the most probable preterminal for each word is 90% accurate 8.)</S>",Aim_Citation
17,A00-2018,N06-1022,0,2000,0,"The parser of Charniak (2000) is also a two-stage ctf model, where the first stage is a smoothed Markov grammar (it uses up to three previous constituents as context), and the second stage is a lexicalized Markov grammar with extra annotations about parents and grandparents","The parser of Charniak (2000) is also a two-stage ctf model, where the first stage is a smoothed Markov grammar (it uses up to three previous constituents as context), and the second stage is a lexicalized Markov grammar with extra annotations about parents and grandparents","'91','97','143','173'","<S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""97"" ssid=""8"">The other four equations can be found in a longer version of this paper available on the author\s website (www.cs.brown.eduhiec).</S><S sid=""143"" ssid=""34"">The first is simply that if we first guess the pre-terminal, when we go to guess the head the first thing we can condition upon is the pre-terminal, i.e., we compute p(h I t).</S><S sid=""173"" ssid=""64"">However, a second-order grammar does slightly better and a third-order grammar does significantly better than the tree-bank parser.</S>",Method_Citation
18,A00-2018,N06-1022,0,2000,0,"Most recently, McDonald et al (2005) have implemented a dependency parser with good accuracy (it is almost as good at dependency parsing as Charniak (2000)) and very impressive speed (it is about ten times faster than Collins (1997) and four times faster than Charniak (2000))","Most recently, McDonald et al (2005) have implemented a dependency parser with good accuracy (it is almost as good at dependency parsing as Charniak (2000)) and very impressive speed (it is about ten times faster than Collins (1997) and four times faster than Charniak (2000))","'1','91','174','175'","<S sid=""1"" ssid=""1"">We present a new parser for parsing down to Penn tree-bank style parse trees that achieves 90.1% average precision/recall for sentences of 40 and less, and for of length 100 and less when trained and tested on the previously established 5,9,10,15,17 &amp;quot;standard&amp;quot; sections of the Wall Street Journal treebank.</S><S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S><S sid=""174"" ssid=""1"">We have presented a lexicalized Markov grammar parsing model that achieves (using the now standard training/testing/development sections of the Penn treebank) an average precision/recall of 91.1% on sentences of length &lt; 40 and 89.5% on sentences of length &lt; 100.</S><S sid=""175"" ssid=""2"">This corresponds to an error reduction of 13% over the best previously published single parser results on this test set, those of Collins 9.</S>","Hypothesis_Citation,Method_Citation,Results_Citation"
19,A00-2018,H05-1035,0,"Charniak, 2000",0,"The feature set contains complex information extracted automatically from candidate syntax trees generated by parsing (Charniak, 2000), trees that will be improved by more accurate PP-attachment decisions","The feature set contains complex information extracted automatically from candidate syntax trees generated by parsing (Charniak, 2000), trees that will be improved by more accurate PP-attachment decisions","'27','39','49','91'","<S sid=""27"" ssid=""16"">In the simplest of such models, a zeroorder Markov grammar, each label on the righthand side is generated conditioned only on / &#8212; that is, according to the distributions p(Li j1), p(M I 1), and p(Ri I 1).</S><S sid=""39"" ssid=""8"">In our work we assume that any feature can occur at most once, so features are boolean-valued: 0 if the pattern does not occur, 1 if it does.</S><S sid=""49"" ssid=""18"">First, as already implicit in our discussion, factoring the probability computation into a sequence of values corresponding to various &amp;quot;features&amp;quot; suggests that the probability model should be easily changeable &#8212; just change the set of features used.</S><S sid=""91"" ssid=""2"">As the generative model is top-down and we use a standard bottom-up best-first probabilistic chart parser 2,7, we use the chart parser as a first pass to generate candidate possible parses to be evaluated in the second pass by our probabilistic model.</S>",Method_Citation
20,A00-2018,P04-1042,0,2000,0,"Note that the dependency figures of Dienes lag behind even the parsed results for Johnson? s model; this may well be due to the fact that Dienes built his model as an extension of Collins (1999), which lags behind Charniak (2000) by about 1.3-1.5% .Manual investigation of errors on English gold standard data revealed two major issues that suggest further potential for improvement in performance without further increase in algorithmic complexity or training set size","Note that the dependency figures of Dienes lag behind even the parsed results for Johnson's model; this may well be due to the fact that Dienes built his model as an extension of Collins (1999), which lags behind Charniak (2000) by about 1.3-1.5%. Manual investigation of errors on English gold standard data revealed two major issues that suggest further potential for improvement in performance without further increase in algorithmic complexity or training set size","'32','174','175','180'","<S sid=""32"" ssid=""1"">The major problem confronting the author of a generative parser is what information to use to condition the probabilities required in the model, and how to smooth the empirically obtained probabilities to take the sting out of the sparse data problems that are inevitable with even the most modest conditioning.</S><S sid=""174"" ssid=""1"">We have presented a lexicalized Markov grammar parsing model that achieves (using the now standard training/testing/development sections of the Penn treebank) an average precision/recall of 91.1% on sentences of length &lt; 40 and 89.5% on sentences of length &lt; 100.</S><S sid=""175"" ssid=""2"">This corresponds to an error reduction of 13% over the best previously published single parser results on this test set, those of Collins 9.</S><S sid=""180"" ssid=""7"">From our perspective, perhaps the two most important numbers to come out of this research are the overall error reduction of 13% over the results in 9 and the intermediateresult improvement of nearly 2% on labeled precision/recall due to the simple idea of guessing the head\s pre-terminal before guessing the head.</S>",Method_Citation
