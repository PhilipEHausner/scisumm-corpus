Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P87-1015,P01-1018,0,1987,0,"The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","The approach that Vijay-Shanker et al (1987) and Weir (1988) take, elaborated on by Becker et al (1992), is to identify a very general class of formalisms, which they call linear context free rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared","'1','2','4','92'","<S sid=""1"" ssid=""1"">We consider the structural descriptions produced by various grammatical formalisms in terms of the complexity of the paths and the relationship between paths in the sets of structural descriptions that each system can generate.</S><S sid=""2"" ssid=""2"">In considering the relationship between formalisms, we show that it is useful to abstract away from the details of the formalism, and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation, we describe a class of formalisms which we call Linear Context- Free Rewriting Systems, and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid=""4"" ssid=""2"">Little attention, however, has been paid to the structural descriptions that these formalisms can assign to strings, i.e. their strong generative capacity.</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S>",Aim_Citation
2,P87-1015,E09-1055,0,"Vijay-Shanker et al, 1987",0,"Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","Here we use the standard definition of LCFRS (Vijay-Shanker et al, 1987) and only fix our notation; for a more thorough discussion of this formal ism, we refer to the literature. Let G be an LCFRS","'119','152','221','230'","<S sid=""119"" ssid=""4"">In defining LCFRS\s, we hope to generalize the definition of CFG\s to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""152"" ssid=""37"">As suggested at the end of Section 3, the restrictions that have been specified in the definition of LCFRS\s suggest that they can be efficiently recognized.</S><S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S><S sid=""230"" ssid=""36"">LCFRS\s have only been loosely defined in this paper; we have yet to provide a complete set of formal properties associated with members of this class.</S>",Method_Citation
3,P87-1015,W07-2214,0,"Vijay-Shanker et al, 1987",0,"There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","There are many (structural) mildly context sensitive grammar formalisms ,e.g .mcfg ,lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987)","'0','1','177','214'","<S sid=""0"">CHARACTERIZING STRUCTURAL DESCRIPTIONS PRODUCED BY VARIOUS GRAMMATICAL FORMALISMS*</S><S sid=""1"" ssid=""1"">We consider the structural descriptions produced by various grammatical formalisms in terms of the complexity of the paths and the relationship between paths in the sets of structural descriptions that each system can generate.</S><S sid=""177"" ssid=""62"">In the next section, we show how an ATM can accept the strings generated by a grammar in a LCFRS formalism in logspace, and hence show that each family can be recognized in polynomial time.</S><S sid=""214"" ssid=""20"">LCFRS\s share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S>","Method_Citation,Aim_Citation"
4,P87-1015,P09-2003,0,,0,"They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","They are in particular more powerful than linear context-free rewriting systems (LCFRS) (Vijay-Shanker et al, 1987)","'92','118','134','136'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS\s) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG\s).</S><S sid=""136"" ssid=""21"">These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &amp;quot;size&amp;quot; is the sum of its constituents plus some constant For example, the operation 4, discussed in the case of CFG\s (in Section 4.1) adds the constant equal to the sum of the length of the strings VI, un+r&#8226; Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.</S>",Method_Citation
5,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","Following this line, (Vijay-Shanker et al, 1987) have introduced a formalism called linear context-free rewriting systems (LCFRSs) that has received much attention in later years by the community","'1','2','92','207'","<S sid=""1"" ssid=""1"">We consider the structural descriptions produced by various grammatical formalisms in terms of the complexity of the paths and the relationship between paths in the sets of structural descriptions that each system can generate.</S><S sid=""2"" ssid=""2"">In considering the relationship between formalisms, we show that it is useful to abstract away from the details of the formalism, and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation, we describe a class of formalisms which we call Linear Context- Free Rewriting Systems, and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""207"" ssid=""13"">We outlined the definition of a family of constrained grammatical formalisms, called Linear Context-Free Rewriting Systems.</S>","Hypothesis_Citation,Aim_Citation"
6,P87-1015,P09-1111,0,"Vijay-Shanker et al, 1987",0,"We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","We briefly summarize here the terminology and notation that we adopt for LCFRS; for detailed definitions, see (Vijay-Shanker et al, 1987)","'30','119','152','221'","<S sid=""30"" ssid=""15"">Let n be some node labeled X in a tree -y (see Figure 3).</S><S sid=""119"" ssid=""4"">In defining LCFRS\s, we hope to generalize the definition of CFG\s to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""152"" ssid=""37"">As suggested at the end of Section 3, the restrictions that have been specified in the definition of LCFRS\s suggest that they can be efficiently recognized.</S><S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S>",Method_Citation
7,P87-1015,P07-1021,0,"Vijay-Shanker et al, 1987",0,"We write REGD.k/ to refer to the class of regular dependency languages with a gap-degree bounded by k. Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","Linear Context-Free Rewriting Systems Gap-restricted dependency languages are closely related to Linear Context-Free Rewriting Systems (lcfrs) (Vijay-Shanker et al, 1987), a class of formal systems that generalizes several mildly context-sensitive grammar formalisms","'3','92','117','214'","<S sid=""3"" ssid=""1"">Much of the study of grammatical systems in computational linguistics has been focused on the weak generative capacity of grammatical formalism.</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""117"" ssid=""2"">Our goal is to define a class of formal systems, and show that any member of this class will possess certain attractive properties.</S><S sid=""214"" ssid=""20"">LCFRS\s share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S>",Hypothesis_Citation
8,P87-1015,N09-1061,0,"Vijay-Shanker et al, 1987",0,"This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006) .In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","This observation is in line with empirical studies in the context of dependency parsing, where the need for formalisms with higher fan-out has been observed even in standard, single language texts (Kuhlmann and Nivre, 2006). In this paper, we present an algorithm that computes optimal decompositions of rules in the formalism of Linear Context-Free Rewriting Systems (LCFRS) (Vijay-Shanker et al, 1987)","'2','92','118','119'","<S sid=""2"" ssid=""2"">In considering the relationship between formalisms, we show that it is useful to abstract away from the details of the formalism, and examine the nature of their derivation process as reflected by properties their trees. find that several of the formalisms considered can be seen as being closely related since they have derivation tree sets with the same structure as those produced by Context-Free Grammars On the basis of this observation, we describe a class of formalisms which we call Linear Context- Free Rewriting Systems, and show they are recognizable in polynomial time and generate only semilinear languages.</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS\s) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid=""119"" ssid=""4"">In defining LCFRS\s, we hope to generalize the definition of CFG\s to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S>",Aim_Citation
9,P87-1015,N09-1061,0,1987,0,"We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","We briefly summarize the terminology and notation that we adopt for LCFRS; for detailed definitions, see Vijay-Shanker et al (1987)","'30','119','152','221'","<S sid=""30"" ssid=""15"">Let n be some node labeled X in a tree -y (see Figure 3).</S><S sid=""119"" ssid=""4"">In defining LCFRS\s, we hope to generalize the definition of CFG\s to formalisms manipulating any structure, e.g. strings, trees, or graphs.</S><S sid=""152"" ssid=""37"">As suggested at the end of Section 3, the restrictions that have been specified in the definition of LCFRS\s suggest that they can be efficiently recognized.</S><S sid=""221"" ssid=""27"">Members of LCFRS whose operations have this property can be translated into the ILFP notation (Rounds, 1985).</S>",Method_Citation
10,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"LCFRS (Vijay-Shanker et al, 1987) are anatural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","LCFRS (Vijay-Shanker et al, 1987) are a natural extension of CFG in which a single nonterminal node can dominate more than one continuous span of terminals","'41','42','54','156'","<S sid=""41"" ssid=""26"">If 7 is an elementary tree, the derivation tree consists of a single node labeled 7.</S><S sid=""42"" ssid=""27"">Suppose -y results from the adjunction of 71, ,-y, at the k distinct tree addresses 141, , nk in some elementary tree 7\, respectively.</S><S sid=""54"" ssid=""39"">An IG can be viewed as a CFG in which each nonterminal is associated with a stack.</S><S sid=""156"" ssid=""41"">Giving a recognition algorithm for LCFRL\s involves describing the substrings of the input that are spanned by the structures derived by the LCFRS\s and how the composition operation combines these substrings.</S>",Method_Citation
11,P87-1015,W10-1407,0,"Vijay-Shanker et al, 1987",0,"A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S )wherea) N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","A LCFRS (Vijay-Shanker et al, 1987) is a tuple G= (N, T, V, P, S ) where N is a finite set of non-terminals with a function dim: N? N that determines the fan-out of each A? N; b) T and V are disjoint finite sets of terminals and variables; c) S? N is the start symbol with dim (S)= 1; d) P is a finite set of rewriting rules A (? 1,..","'76','87','90','162'","<S sid=""76"" ssid=""61"">We must adjoin all trees in an auxiliary tree set together as a single step in the derivation.</S><S sid=""87"" ssid=""72"">For example, the MCTAG shown in Figure 7 generates trees of the form shown in Figure 4b.</S><S sid=""90"" ssid=""75"">Thus, as in CFG\s, at any point in the derivation, the set of structures that can be applied is determined only by a finite set of rules encapsulated by the grammar.</S><S sid=""162"" ssid=""47"">Some of the operations will be constant functions, corresponding to elementary structures, and will be written as f () = zi), where each z, is a constant, the string of terminal symbols al an,,,.</S>",Method_Citation
12,P87-1015,E09-1053,0,1987,0,"In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","In particular, we cast new light on the relationship between CCG and other mildly context-sensitive formalisms such as Tree-Adjoining Grammar (TAG; Joshi and Schabes (1997)) and Linear Context-Free Rewrite Systems (LCFRS; Vijay-Shanker et al (1987))","'92','135','214','232'","<S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""135"" ssid=""20"">Unlike GCFG\s, however, the composition operations of LCFRS\s are restricted to be linear (do not duplicate unboundedly large structures) and nonerasing (do not erase unbounded structures, a restriction made in most modern transformational grammars).</S><S sid=""214"" ssid=""20"">LCFRS\s share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S><S sid=""232"" ssid=""38"">In considering this aspect of a formalism, we hope to better understand the relationship between the structural descriptions generated by the grammars of a formalism, and the properties of semilinearity and polynomial recognizability.</S>",Method_Citation
13,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"2 By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of deriva tional structures are all regular (Vijay-Shanker et al., 1987)","By this result, CCG falls in line with context-free grammars, TAG, and LCFRS, whose sets of derivational structures are all regular (Vijay-Shanker et al., 1987)","'34','38','73','136'","<S sid=""34"" ssid=""19"">It can be shown that the path set of the tree set generated by a TAG G is a context-free language.</S><S sid=""38"" ssid=""23"">Thus, the derivation trees for TAG\s have the same structure as local sets.</S><S sid=""73"" ssid=""58"">The equivalence of CC\s with this restriction to TAG\s and HG\s is, however, still an open problem.</S><S sid=""136"" ssid=""21"">These two restrictions impose the constraint that the result of composing any two structures should be a structure whose &amp;quot;size&amp;quot; is the sum of its constituents plus some constant For example, the operation 4, discussed in the case of CFG\s (in Section 4.1) adds the constant equal to the sum of the length of the strings VI, un+r&#8226; Since we are considering formalisms with arbitrary structures it is difficult to precisely specify all of the restrictions on the composition operations that we believe would appropriately generalize the concatenation operation for the particular structures used by the formalism.</S>",Method_Citation
14,P87-1015,E09-1053,0,"Vijay-Shanker et al, 1987",0,"It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","It is important to note that while CCG derivations themselves can be seen as trees as well, they do not always form regular tree languages (Vijay-Shanker et al, 1987)","'39','75','93','112'","<S sid=""39"" ssid=""24"">As with HG\s derivation structures are annotated; in the case of TAG\s, by the trees used for adjunction and addresses of nodes of the elementary tree where adjunctions occurred.</S><S sid=""75"" ssid=""60"">A multicomponent Tree Adjoining Grammar (MCTAG) consists of a finite set of finite elementary tree sets.</S><S sid=""93"" ssid=""78"">As is described in Section 4, the property of having a derivation tree set that is a local set appears to be useful in showing important properties of the languages generated by the formalisms.</S><S sid=""112"" ssid=""18"">.t The path set of tree sets at level k +1 have the complexity of the string language of level k. The independence of paths in a tree set appears to be an important property.</S>",Method_Citation
15,P87-1015,N10-1035,0,1987,0,"On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975) .Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings ,i.e., discontinuous phrases","On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi,1985), including, among several others, the tree ad joining grammars (TAGs) of Joshi et al (1975). Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings, i.e., discontinuous phrases","'3','74','91','214'","<S sid=""3"" ssid=""1"">Much of the study of grammatical systems in computational linguistics has been focused on the weak generative capacity of grammatical formalism.</S><S sid=""74"" ssid=""59"">An extension of the TAG system was introduced by Joshi et al. (1975) and later redefined by Joshi (1987) in which the adjunction operation is defined on sets of elementary trees rather than single trees.</S><S sid=""91"" ssid=""76"">We characterize a class of formalisms that have this property in Section 4.</S><S sid=""214"" ssid=""20"">LCFRS\s share several properties possessed by the class of mildly context-sensitive formalisms discussed by Joshi (1983/85).</S>",Hypothesis_Citation
16,P87-1015,P12-1053,0,1987,0,"CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991) .3 Thus, CFTG are mildly context-sensitive since their generated string languages are semi-linear and can be parsed in polynomial time (Go ?mez-Rodr? ?guez et al, 2010)","CFTG are weakly equivalent to the simple macro grammars of Fischer (1968), which are a notational variant of the well-nested linear context-free rewriting systems (LCFRS) of Vijay-Shanker et al (1987) and the well-nested multiple context-free grammars (MCFG) of Seki et al (1991)","'27','92','118','134'","<S sid=""27"" ssid=""12"">Thus, the tree sets generated by HG\s are similar to those of CFG\s, with each node annotated by the operation (concatenation or wrapping) used to combine the headed strings derived by the daughters of Tree Adjoining Grammars, a tree rewriting formalism, was introduced by Joshi, Levy and Takahashi (1975) and Joshi (1983/85).</S><S sid=""92"" ssid=""77"">We loosely describe the class of all such systems as Linear Context-Free Rewriting Formalisms.</S><S sid=""118"" ssid=""3"">In the remainder of the paper, we outline how a class of Linear Context-Free Rewriting Systems (LCFRS\s) may be defined and sketch how semilinearity and polynomial recognition of these systems follows.</S><S sid=""134"" ssid=""19"">These systems are similar to those described by Pollard (1984) as Generalized Context-Free Grammars (GCFG\s).</S>",Method_Citation
