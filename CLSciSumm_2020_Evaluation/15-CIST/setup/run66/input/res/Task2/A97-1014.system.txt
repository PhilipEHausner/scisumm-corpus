Since the combinatorics of syntactic constructions creates a. To keep the human annotator from missing errors made by the tagger , we additionally calculate the strongest competitor for each label G. A tree meeting these requirements is given below : Adv V NP NP V CPL NP V damn wird ihn Anna erkennen , dais er \'vein . Since the combinatorics of syntactic constructions creates a. demand for very large corpora. To keep the human annotator from missing errors made by the tagger , we additionally calculate the strongest competitor for each label G. This requirement speaks against the traditional sort of dependency trees , in which heads a , re represented as non-terminal nodes , cf . In order to reduce their ambiguity potential , rather simple , \'flat\ ' trees should be employed , while more information can be expressed by a rich system of function labels . We describe an annotation scheme and a tool developed for creating linguistically annotated corpora for non-configurational languages . For evaluation , the already annotated sentences were divided into two disjoint sets , one for training ( 90 % of the corpus ) , the other one for testing ( 10 % ) . If its probability is close to the winner ( closeness is defined by a threshold on the quotient ) , the assignment is regarded as unreliable , and the annotator is asked to confirm the assignment . Since the combinatorics of syntactic constructions creates a. demand for