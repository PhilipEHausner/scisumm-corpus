such resources exist for hebrew (itai et al., 2006), but unfortunately use a tagging scheme which is incompatible with the one of the hebrew treebank.s for this reason, we use a data-driven morphological analyzer derived from the training data similar to (cohen and smith, 2007).
both (tsarfaty, 2006; cohen and smith, 2007) have shown that a single integrated framework outperforms a completely streamlined implementation, yet neither has shown a single generative model which handles both tasks.
this analyzer setting is similar to that of (cohen and smith, 2007), and models using it are denoted nohsp, parser and grammar we used bitpar (schmid, 2004), an efficient general purpose parser,10 together with various treebank grammars to parse the input sentences and propose compatible morphological segmentation and syntactic analysis.
tsarfaty (2006) used a morphological analyzer (segal, 2000), a pos tagger (bar-haim et al., 2005), and a general purpose parser (schmid, 2000) in an integrated framework in which morphological and syntactic components interact to share information, leading to improved performance on the joint task.
morphological analyzers for hebrew that analyze a surface form in isolation have been proposed by segal (2000), yona and wintner (2005), and recently by the knowledge center for processing hebrew (itai et al., 2006).
the development of the very first hebrew treebank (sima’an et al., 2001) called for the exploration of general statistical parsing methods, but the application was at first limited.
a compatible view is presented by charniak et al. (1996) who consider the kind of probabilities a generative parser should get from a pos tagger, and concludes that these should be p(w|t) “and nothing fancier”.3 in our setting, therefore, the lattice is not used to induce a probability distribution on a linear context, but rather, it is used as a common-denominator of state-indexation of all segmentations possibilities of a surface form.
