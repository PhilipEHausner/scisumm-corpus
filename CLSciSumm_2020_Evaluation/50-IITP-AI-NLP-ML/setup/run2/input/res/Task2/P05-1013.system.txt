even this may be nondeterministic, in case the graph contains several non-projective arcs whose lifts interact, but we use the following algorithm to construct a minimal projective transformation d0 = (w, a0) of a (nonprojective) dependency graph d = (w, a): the function smallest-nonp-arc returns the non-projective arc with the shortest distance from head to dependent (breaking ties from left to right).
the last four columns in table 3 show the distribution of nonprojective arcs with respect to the number of lifts required.
there exist a few robust broad-coverage parsers that produce non-projective dependency structures, notably tapanainen and j¨arvinen (1997) and wang and harper (2004) for english, foth et al. (2004) for german, and holan (2004) for czech.
instead, we want to apply an inverse transformation to recover the underlying (nonprojective) dependency graph.
in section 2 we introduce the graph transformation techniques used to projectivize and deprojectivize dependency graphs, and in section 3 we describe the data-driven dependency parser that is the core of our system.
however, since we want to preserve as much of the original structure as possible, we are interested in finding a transformation that involves a minimal number of lifts.
experiments using data from the prague dependency treebank show that the combined system can handle nonprojective constructions with a precision sufficient to yield a significant improvement in overall parsing accuracy.
although the best published results for the collins parser is 80% uas (collins, 1999), this parser reaches 82% when trained on the entire training data set, and an adapted version of charniak’s parser (charniak, 2000) performs at 84% (jan hajiˇc, pers. comm.).
