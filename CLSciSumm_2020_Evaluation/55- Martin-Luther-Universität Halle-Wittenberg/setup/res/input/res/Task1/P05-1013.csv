Citance Number,Citation Marker,Citation Marker Offset,Citation Offset,Citation Text,Citing Article,Discourse Facet,Reference Article,Reference Offset,Reference Text,Reference Text Clean,fileName
1,"Nivre and Nilsson, 2005",0,0,"Recent work by Nivre and Nilsson introduces a technique where the projectivization transformation is encoded in the non-terminals of constituents during parsing (Nivre and Nilsson, 2005)",W05-1505,Implication_Citation,P05-1013,'47',"<S sid=""47"" ssid=""18"">In practice, we can therefore expect a trade-off such that increasing the amount of information encoded in arc labels will cause an increase in the accuracy of the inverse transformation but a decrease in the accuracy with which the parser can construct the labeled representations.</S>","<S sid=""47"" ssid=""18"">In practice, we can therefore expect a trade-off such that increasing the amount of information encoded in arc labels will cause an increase in the accuracy of the inverse transformation but a decrease in the accuracy with which the parser can construct the labeled representations.</S>",P05-1013.csv
2,"Nivre and Nilsson, 2005",0,0,"1http: //sourceforge.net/projects/mstparser Figure 1: CoNLL-X dependency tree Figure 2: Penn Treebank-style phrase structure tree KSDEP Sagae and Tsujii (2007)? s dependencyparser,2 based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005)",P08-1006,Method_Citation,P05-1013,'109',"<S sid=""109"" ssid=""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>","<S sid=""109"" ssid=""1"">We have presented a new method for non-projective dependency parsing, based on a combination of data-driven projective dependency parsing and graph transformation techniques.</S>",P05-1013.csv
3,"Nivre and Nilsson, 2005",0,0,"Bengoetxea and Gojenola (2010) discuss non-projective dependencies in Basque and show that the pseudo-projective transformation of (Nivre and Nilsson, 2005) improves accuracy for dependency parsing of Basque",W10-1401,Method_Citation,P05-1013,'91',"<S sid=""91"" ssid=""2"">Table 5 shows the overall parsing accuracy attained with the three different encoding schemes, compared to the baseline (no special arc labels) and to training directly on non-projective dependency graphs.</S>","<S sid=""91"" ssid=""2"">Table 5 shows the overall parsing accuracy attained with the three different encoding schemes, compared to the baseline (no special arc labels) and to training directly on non-projective dependency graphs.</S>",P05-1013.csv
4,"Nivre and Nilsson, 2005",0,0,"For tree banks with non-projective trees weuse the pseudo-projective parsing technique to trans form the tree bank into projective structures (Nivre and Nilsson, 2005)",P12-3029,Hypothesis_Citation,P05-1013,'18',"<S sid=""18"" ssid=""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>","<S sid=""18"" ssid=""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>",P05-1013.csv
5,"Nivre and Nilsson, 2005",0,0,"It uses graph transformation to handle non-projective trees (Nivre and Nilsson, 2005)",W10-1403,Hypothesis_Citation,P05-1013,'89',"<S sid=""89"" ssid=""16"">The increase is generally higher for PDT than for DDT, which indicates a greater diversity in non-projective constructions.</S>","<S sid=""89"" ssid=""16"">The increase is generally higher for PDT than for DDT, which indicates a greater diversity in non-projective constructions.</S>",P05-1013.csv
6,"Nivre and Nilsson, 2005",0,0,"To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson,2005), in which non projective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the non projective links at parse time",D08-1008,Results_Citation,P05-1013,'79',"<S sid=""79"" ssid=""6"">In the first part of the experiment, dependency graphs from the treebanks were projectivized using the algorithm described in section 2.</S>","<S sid=""79"" ssid=""6"">In the first part of the experiment, dependency graphs from the treebanks were projectivized using the algorithm described in section 2.</S>",P05-1013.csv
7,2005,0,0,",wn in O (n) time, producing a projective dependency graph satisfying conditions 1? 4 in section 2.1, possibly after adding arcs (0, i ,lr) for every node i 6= 0 that is a root in the output graph (where lr is a special label for root modifiers) .Nivre and Nilsson (2005) showed how the restriction to projective dependency graphs could be lifted by using graph transformation techniques to pre process training data and post-process parser output, so-called pseudo-projective parsing. To learn transition scores, these systems use discriminative learning methods ,e.g., memory-based learning or support vector machines",D07-1013,Results_Citation,P05-1013,'29',"<S sid=""29"" ssid=""25"">In section 5, we then evaluate the entire parsing system by training and evaluating on data from the Prague Dependency Treebank.</S>","<S sid=""29"" ssid=""25"">In section 5, we then evaluate the entire parsing system by training and evaluating on data from the Prague Dependency Treebank.</S>",P05-1013.csv
8,2005,0,0,"For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective",D07-1119,Method_Citation,P05-1013,'67',"<S sid=""67"" ssid=""6"">Table 2 shows the features used in the current version of the parser.</S>","<S sid=""67"" ssid=""6"">Table 2 shows the features used in the current version of the parser.</S>",P05-1013.csv
9,"Nivre and Nilsson, 2005",0,0,"Whereas most of the early approaches were limited to strictly projective dependency structures, where the projection of a syntactic head must be continuous, attention has recently shifted to the analysis of non-projective structures, which are required for linguistically adequate representations, especially in languages with free or flexible word order. The most popular strategy for capturing non projective structures in data-driven dependency parsing is to apply some kind of post-processing to the output of a strictly projective dependency parser, as in pseudo-projective parsing (Nivre and Nilsson, 2005), corrective modeling (Hall and Nova? k, 2005), or approximate non-projective parsing (McDonald and Pereira, 2006)",N07-1050,Method_Citation,P05-1013,'10',"<S sid=""10"" ssid=""6"">It is also true of the adaptation of the Collins parser for Czech (Collins et al., 1999) and the finite-state dependency parser for Turkish by Oflazer (2003).</S>","<S sid=""10"" ssid=""6"">It is also true of the adaptation of the Collins parser for Czech (Collins et al., 1999) and the finite-state dependency parser for Turkish by Oflazer (2003).</S>",P05-1013.csv
10,"Nivre and Nilsson, 2005",0,0,"troduced in (Nivre and Nilsson, 2005) to handle the non-projective languages including Czech, German and English",W09-1207,Hypothesis_Citation,P05-1013,'5',"<S sid=""5"" ssid=""1"">It is sometimes claimed that one of the advantages of dependency grammar over approaches based on constituency is that it allows a more adequate treatment of languages with variable word order, where discontinuous syntactic constructions are more common than in languages like English (Mel&#8217;&#711;cuk, 1988; Covington, 1990).</S>","<S sid=""5"" ssid=""1"">It is sometimes claimed that one of the advantages of dependency grammar over approaches based on constituency is that it allows a more adequate treatment of languages with variable word order, where discontinuous syntactic constructions are more common than in languages like English (Mel&#8217;&#711;cuk, 1988; Covington, 1990).</S>",P05-1013.csv
11,"Nivre and Nilsson, 2005",0,0,"non projective (Nivre and Nilsson, 2005), we char ac terise a sense in which the structures appearing in tree banks can be viewed as being only? slightly? ill-nested",E09-1034,Method_Citation,P05-1013,'48',"<S sid=""48"" ssid=""19"">To explore this tradeoff, we have performed experiments with three different encoding schemes (plus a baseline), which are described schematically in Table 1.</S>","<S sid=""48"" ssid=""19"">To explore this tradeoff, we have performed experiments with three different encoding schemes (plus a baseline), which are described schematically in Table 1.</S>",P05-1013.csv
12,"Nivre and Nilsson, 2005",0,0,"In order to avoid losing the benefits of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)",W09-1218,Results_Citation,P05-1013,'61',"<S sid=""61"" ssid=""32"">Before we turn to the evaluation, however, we need to introduce the data-driven dependency parser used in the latter experiments.</S>","<S sid=""61"" ssid=""32"">Before we turn to the evaluation, however, we need to introduce the data-driven dependency parser used in the latter experiments.</S>",P05-1013.csv
13,"Nivre and Nilsson, 2005",0,0,"Pseudo-projective parsing for recovering non projective structures (Nivre and Nilsson, 2005)",C08-1081,Results_Citation,P05-1013,'1',"<S sid=""1"" ssid=""1"">In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.</S>","<S sid=""1"" ssid=""1"">In order to realize the full potential of dependency-based syntactic parsing, it is desirable to allow non-projective dependency structures.</S>",P05-1013.csv
14,2005,0,0,"Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3.4)",C08-1081,Method_Citation,P05-1013,'36',"<S sid=""36"" ssid=""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi &#8212;* wk such that wi &#8212;*&#8727; wj holds in the original graph.</S>","<S sid=""36"" ssid=""7"">As observed by Kahane et al. (1998), any (nonprojective) dependency graph can be transformed into a projective one by a lifting operation, which replaces each non-projective arc wj wk by a projective arc wi &#8212;* wk such that wi &#8212;*&#8727; wj holds in the original graph.</S>",P05-1013.csv
15,2005,0,0,Pseudo-projective parsing was proposed by Nivreand Nilsson (2005) as a way of dealing with non projective structures in a projective data-driven parser,C08-1081,Results_Citation,P05-1013,'98',"<S sid=""98"" ssid=""9"">By contrast, when we turn to a comparison of the three encoding schemes it is hard to find any significant differences, and the overall impression is that it makes little or no difference which encoding scheme is used, as long as there is some indication of which words are assigned their linear head instead of their syntactic head by the projective parser.</S>","<S sid=""98"" ssid=""9"">By contrast, when we turn to a comparison of the three encoding schemes it is hard to find any significant differences, and the overall impression is that it makes little or no difference which encoding scheme is used, as long as there is some indication of which words are assigned their linear head instead of their syntactic head by the projective parser.</S>",P05-1013.csv
16,2005,0,0,"Weprojectivize training data by a minimal transformation, lifting non-projective arcs one step at a time, and extending the arc label of lifted arcs using the encoding scheme called HEAD by Nivre and Nilsson (2005), which means that a lifted arc is assigned the label r? h, where r is the original label and h is the label of the original head in the non-projective dependency graph",C08-1081,Results_Citation,P05-1013,'37',"<S sid=""37"" ssid=""8"">Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj &#8212;* wk is necessarily projective if the dependency graph is well-formed).</S>","<S sid=""37"" ssid=""8"">Here we use a slightly different notion of lift, applying to individual arcs and moving their head upwards one step at a time: Intuitively, lifting an arc makes the word wk dependent on the head wi of its original head wj (which is unique in a well-formed dependency graph), unless wj is a root in which case the operation is undefined (but then wj &#8212;* wk is necessarily projective if the dependency graph is well-formed).</S>",P05-1013.csv
17,"Nivre and Nilsson, 2005",0,0,"For tree banks with non-projective trees we use the pseudo-projective parsing technique to transform the tree bank into projective structures (Nivre and Nilsson, 2005)",D11-1006,Hypothesis_Citation,P05-1013,'18',"<S sid=""18"" ssid=""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>","<S sid=""18"" ssid=""14"">In addition, there are several approaches to non-projective dependency parsing that are still to be evaluated in the large (Covington, 1990; Kahane et al., 1998; Duchier and Debusmann, 2001; Holan et al., 2001; Hellwig, 2003).</S>",P05-1013.csv
18,"Nivre and Nilsson, 2005",0,0,"Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases",P11-2121,Method_Citation,P05-1013,'100',"<S sid=""100"" ssid=""11"">It is likely that the more complex cases, where path information could make a difference, are beyond the reach of the parser in most cases.</S>","<S sid=""100"" ssid=""11"">It is likely that the more complex cases, where path information could make a difference, are beyond the reach of the parser in most cases.</S>",P05-1013.csv
19,"Nivre and Nilsson, 2005",0,0,"Itshould be noted that the proportion of lost dependencies is about twice as high as the proportion of dependencies that are non-projective in them selves (Nivre and Nilsson, 2005)",E06-1010,Results_Citation,P05-1013,'69',"<S sid=""69"" ssid=""8"">For each token, three types of features may be taken into account: the word form; the part-of-speech assigned by an automatic tagger; and labels on previously assigned dependency arcs involving the token &#8211; the arc from its head and the arcs to its leftmost and rightmost dependent, respectively.</S>","<S sid=""69"" ssid=""8"">For each token, three types of features may be taken into account: the word form; the part-of-speech assigned by an automatic tagger; and labels on previously assigned dependency arcs involving the token &#8211; the arc from its head and the arcs to its leftmost and rightmost dependent, respectively.</S>",P05-1013.csv
20,"Nivre and Nilsson, 2005",0,0,"The resulting algorithm is projective, and nonprojectivity is handled by pseudo-projective trans formations as described in (Nivre and Nilsson, 2005)",D07-1111,Results_Citation,P05-1013,'106',"<S sid=""106"" ssid=""17"">However, the accuracy is considerably higher than previously reported results for robust non-projective parsing of Czech, with a best performance of 73% UAS (Holan, 2004).</S>","<S sid=""106"" ssid=""17"">However, the accuracy is considerably higher than previously reported results for robust non-projective parsing of Czech, with a best performance of 73% UAS (Holan, 2004).</S>",P05-1013.csv
